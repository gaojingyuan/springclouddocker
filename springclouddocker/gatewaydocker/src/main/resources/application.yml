eurekaService:
  service1: eurekaService1
  service2: eurekaService2
  service3: eurekaService3
spring:
  application:
    name: gateway
# 过滤器/转发配置 begin--------------------------------------
  cloud:
    gateway:
      default-filters:
      routes:
      #------------------------------------------------------------------------
      - id: modulea
        uri: lb://service-a
        predicates:
        - Path= /ma/**
        filters: # 调用目标工程时 省略ma路径 根据项目需要配置
        - StripPrefix= 1
      #------------------------------------------------------------------------
      - id: moduleb
        uri: lb://service-b
        predicates:
        - Path= /mb/**
        filters:
        - StripPrefix= 1
# 过滤器/转发配置 end--------------------------------------
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driverClassName: com.p6spy.engine.spy.P6SpyDriver
    url: jdbc:p6spy:mysql://192.168.1.6:3306/hdqb_test?useUnicode=true&characterEncoding=utf-8&useSSL=false
    username: root
    password: Dgsmy111828
    # 下面为连接池的补充设置，应用到上面所有数据源中
    # 初始化大小，最小，最  大
    initialSize: 5
    minIdle: 5
    maxActive: 20
    # 配置监控统计拦截的filters
    filters: stat
    # 配置获取连接等待超时的时间
    maxWait: 60000
    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    minEvictableIdleTimeMillis: 300000
    # 验证语句
    validationQuery: SELECT 1 FROM DUAL
    testWhileIdle: true
    # 从连接池获取连接时,是否检测连接可用性
    testOnBorrow: false
    # 释放连接到连接池时,是否检测连接可用性
    testOnReturn: false
    # 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: true
    # psCache缓存 100
    maxOpenPreparedStatements: 100
    maxPoolPreparedStatementPerConnectionSize: 50
    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    filters: stat,wall,log4j
    # 对于建立连接过长的连接强制关闭
    removeAbandoned: true
    # 如果连接建立时间超过了30分钟，则强制将其关闭
    removeAbandonedTimeout: 1800
    # 将当前关闭动作记录到日志
    logAbandoned: true
mybatis:
  config-locations: classpath:config/mybatis-config.xml
  mapper-locations: classpath:*.xml
server:
  port: 9000
eureka:
  instance:
    preferIpAddress: true
  client:
    serviceUrl:
      defaultZone: http://${eurekaService.service1}:8888/eureka/,http://${eurekaService.service2}:8887/eureka/,http://${eurekaService.service3}:8886/eureka/
logging:
  level:
    org:
      springframework:
        cloud:
          gateway: TRACE




